@startuml

class Program {
	+ {static} void Main(string[] args)
}

class Application {
	void Run()
}

class GladiatorFightController {
	- List<Gladiator> Combatants { get; }
	- List<Gladiator> Graveyard { get; }
	+ void RunGame()
	- CombatResult GameLoop()
	- void CreateGladiators()
}

class CombatController {
	- int RoundNumber { get; set; }
	+ CombatResult StartFight(Gladiator a, Gladiator b)
	- bool Round(Gladiator a, Gladiator b)
}

class RoundResult {
	+ Gladiator Attacker { get; }
	+ Gladiator Defender { get; }
	+ bool Hit { get; }
	+ int Damage { get; }
}

class CombatResult {
	+ Gladiator Winner { get; }
	+ Gladiator Loser { get; }
}

class Gladiator {
	+ string Name { get; set; }
	+ int AttackScore { get; set; }
	+ int DefenseScore { get; set; }
	+ int HitPoints { get; set; }

	+ Gladiator()
	+ Gladiator(string name)
	+ bool Hits(Gladiator opponent)
	+ int DamageRoll()
	+ bool IsAlive()
}

class Die {
	- {static} Random random
	+ int Sides { get; }
	+ int SideUp { get; }
	+ Die()
	+ Die(int sides)
	+ void Roll()
}

class DiceCup {
	+ void Add(Die die)
	+ void Roll()
	+ int Sum()
	+ List<int> Values()
}

class View {
	+ ShowRemainingGladiators(List<Gladiator> list)
	+ ShowRoundResult(RoundResult result)
	+ ShowCombatResult(CombatResult result)
}

class Names {
	+ string GetRandomName()
}

Program ..> Application
Application ..> GladiatorFightController
GladiatorFightController .> Gladiator
GladiatorFightController ..> CombatController
GladiatorFightController .left.> View
CombatController ..> CombatResult
CombatController ..> RoundResult
CombatController .> Gladiator
CombatController .left.> View
DiceCup o-down- Die
Gladiator .up.> Names
Gladiator .right.> DiceCup


@enduml